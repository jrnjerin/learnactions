
import React, { Component } from 'react'
import PropTypes from 'prop-types'

class Counter extends Component {
  // code here
  render(props) {
    return(
      <div>
        <p>{this.props.value.count}</p>
        <button onClick={() => this.props.onIncrement()}>+</button>
        <button onClick={() => this.props.onDecrement()}>-</button>
        <button onClick={() => {
          if(this.props.value.count % 2 !== 0 || this.props.value.count < 0){
            this.props.onIncrement()
          }
        }}>Increment if odd</button>
        <button onClick={() => this.props.onIncrement()}>Increment if async</button>
    </div>
    );
  }
}

export default Counter




import React from 'react'
import ReactDOM from 'react-dom'
import { createStore } from 'redux'
import Counter from './components/Counter'
import counter from './reducers'

const store = createStore(counter)
const rootEl = document.getElementById('root')

const render = () => ReactDOM.render(
  <div style={{textAlign: "center", marginTop: "200px"}}>
  <Counter
    value={store.getState()}
    onIncrement={() => store.dispatch({ type: 'INCREMENT' })}
    onDecrement={() => store.dispatch({ type: 'DECREMENT' })}
    
  />
  </div>,
  rootEl
)

render()
store.subscribe(render)





// add reducers accordingly
const initialState = {
    count: 0
  };

export default function(state = initialState, action) {
  switch(action.type) {
        case 'INCREMENT':
          return {
            count: state.count + 1
          };
        case 'DECREMENT':
          return {
            count: state.count - 1
          };
        

        default:
          return state;
      }
}